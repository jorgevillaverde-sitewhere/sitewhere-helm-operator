# Use this values to install SiteWhere using rook-ceph-block storageClass
# usage: helm install --name sitewhere -f values-rook-ceph.values sitewhere/sitewhere

sitewhere-infra-core:
  kafka:
    configurationOverrides:
      "num.partitions": 3
      "default.replication.factor": 3
      "min.insync.replicas": 2
      "leader.imbalance.check.interval.seconds": 30
    persistence:
      storageClass: rook-ceph-block
    external:
      enabled: false
    zookeeper:
      service:
        type: NodePort
      persistence:
        storageClass: rook-ceph-block
sitewhere-infra-database:
  mongodb:
    persistence:
      storageClass: rook-ceph-block
  cassandra:
    persistence:
      storageClass: rook-ceph-block
  influxdb:
    persistence:
      storageClass: rook-ceph-block
infra:
  profile: mongodb
  image:
    registry: docker.io
    pullPolicy: IfNotPresent
    imagePullSecrets: "-"
  jaeger:
    enabled: true
    image: jaegertracing/all-in-one
    replicaCount: 1
    service:
      type: ClusterIP
      ports:
        zipkin: "9411"
        ui: "16686"
  mosquitto:
    enabled: true
    image: eclipse-mosquitto:1.4.12
    replicaCount: 1
    service:
      type: LoadBalancer
      port: 1883
  coap:
    enabled: false
    service:
      type: LoadBalancer
      port: 5683

services:
  # profile: default|minimal
  profile: default
  debug: false
  image:
    registry: docker.io
    repository: sitewhere
    # You can target `latest` for stable version of Sitewhere images,
    # `edge` for under development version of SiteWhere images or 
    # a particular version like `2.0.3`.
    # By default, target the last stable version of SiteWhere images
    tag: latest
    pullPolicy: IfNotPresent
    imagePullSecrets: "-"
  logging:
    sitewhere:
      level: INFO
      grpc:
        level: ERROR
    kafka:
      level: ERROR
    zookeeper:
      level: ERROR
  initContainers: true
  asset_management:
    enabled: true
    image: service-asset-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  device_management:
    enabled: true
    image: service-device-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  event_management:
    enabled: true
    image: service-event-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  event_sources:
    enabled: true
    image: service-event-sources
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  inbound_processing:
    enabled: true
    image: service-inbound-processing
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  instance_management:
    enabled: true
    image: service-instance-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  outbound_connectors:
    enabled: true
    image: service-outbound-connectors
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  tenant_management:
    enabled: true
    image: service-tenant-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  user_management:
    enabled: true
    image: service-user-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  web_rest:
    enabled: true
    image: service-web-rest
    replicaCount: 1
    service:
      grpc:
        type: ClusterIP
        api:
          port: 9000
        management:
          port: 9001
      http:
        type: LoadBalancer
        port: 8080
  batch_operations:
    enabled: false
    image: service-batch-operations
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  command_delivery:
    enabled: false
    image: service-command-delivery
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  device_registration:
    enabled: false
    image: service-device-registration
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  device_state:
    enabled: false
    image: service-device-state
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  event_search:
    enabled: false
    image: service-event-search
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  label_generation:
    enabled: false
    image: service-label-generation
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  rule_processing:
    enabled: false
    image: service-rule-processing
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  schedule_management:
    enabled: false
    image: service-schedule-management
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001
  streaming_media:
    enabled: false
    image: service-streaming-media
    replicaCount: 1
    service:
      type: ClusterIP
      grpc:
        api:
          port: 9000
        management:
          port: 9001

persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## If defined, storageClassName: [rook-ceph-block|hostpath]
  storageClass: rook-ceph-block
  accessModes:
    - ReadWriteOnce
  storage: 10Gi
  annotations: {}


